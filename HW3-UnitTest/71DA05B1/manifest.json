{"created":[2015,3,12,8,33,19],"id":"FB71DA05B1","language":"Python-unittest","exercise":"Reverse_Roman","unit_test_framework":"python_unittest","tab_size":4,"visible_files":{"cyber-dojo.sh":"python -m unittest *test*.py\n","output":"F\n======================================================================\nFAIL: testRomanToInteger_Simple (test_roman_number_converter.TestRomanNumberConverter)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"./test_roman_number_converter.py\", line 8, in testRomanToInteger_Simple\n    self.assertEqual(1, converter.romanToInteger(\"I\"))\nAssertionError: 1 != 0\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nFAILED (failures=1)\n","instructions":"Given a Roman number as a string (eg \"XX\") determine\nits integer value (eg 20).\n\nYou cannot write numerals like IM for 999.\nWikipedia states \"Modern Roman numerals are written by\nexpressing each digit separately starting with the\nleftmost digit and skipping any digit with a value of zero.\"\n\nExamples:\n\n   \"I\" -> 1 |    \"X\" -> 10 |    \"C\" -> 100 |    \"M\" -> 1000 \n  \"II\" -> 2 |   \"XX\" -> 20 |   \"CC\" -> 200 |   \"MM\" -> 2000 \n \"III\" -> 3 |  \"XXX\" -> 30 |  \"CCC\" -> 300 |  \"MMM\" -> 3000 \n  \"IV\" -> 4 |   \"XL\" -> 40 |   \"CD\" -> 400 | \"MMMM\" -> 4000 \n   \"V\" -> 5 |    \"L\" -> 50 |    \"D\" -> 500 | \n  \"VI\" -> 6 |   \"LX\" -> 60 |   \"DC\" -> 600 | \n \"VII\" -> 7 |  \"LXX\" -> 70 |  \"DCC\" -> 700 | \n\"VIII\" -> 8 | \"LXXX\" -> 80 | \"DCCC\" -> 800 | \n  \"IX\" -> 9 |   \"XC\" -> 90 |   \"CM\" -> 900 | \n\n \"MCMXC\" -> 1990 (\"M\" -> 1000 + \"CM\" -> 900 + \"XC\" -> 90)\n\"MMVIII\" -> 2008 (\"MM\" -> 2000 + \"VIII\" -> 8)\n  \"XCIX\" -> 99   (\"XC\" -> 90 + \"IX\" -> 9)\n \"XLVII\" -> 47   (\"XL\" -> 40 + \"VII\" -> 7)\n\n","roman_number_converter.py":"class RomanNumberConverter:\n\n    def romanToInteger(self,romanString):\n        return 0\n","test_roman_number_converter.py":"from roman_number_converter import RomanNumberConverter\nimport unittest\n\nclass TestRomanNumberConverter(unittest.TestCase):\n\n    def testRomanToInteger_Simple(self):\n        converter = RomanNumberConverter()\n        self.assertEqual(1, converter.romanToInteger(\"I\"))\n\n\nif __name__ == '__main__':\n    unittest.main()"}}